'use client'

/* eslint-disable @typescript-eslint/no-explicit-any */

import { useState, useRef } from 'react'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Alert, AlertDescription } from '@/components/ui/alert'
import { Badge } from '@/components/ui/badge'
import { Checkbox } from '@/components/ui/checkbox'
// import { Progress } from '@/components/ui/progress' // Currently not used
import { Separator } from '@/components/ui/separator'
import { 
  Upload, 
  Eye, 
  Play, 
  AlertCircle, 
  CheckCircle, 
  Users, 
  UserPlus, 
  UserCheck,
  Download,
  History,
  RotateCcw,
  Settings,
  FileText
} from 'lucide-react'
import { 
  previewCSVImport, 
  executeCSVImport, 
  getImportHistory,
  rollbackImport,
  type ImportPreviewResult,
  type ImportExecutionResult,
  type ImportHistoryEntry,
  type UpsertOptions 
} from '@/lib/actions/csv-import'

interface CSVImportWorkflowProps {
  onImportComplete?: () => void
}

type ImportStep = 'upload' | 'preview' | 'configure' | 'execute' | 'complete'


export function CSVImportWorkflow({ onImportComplete }: CSVImportWorkflowProps) {
  const [currentStep, setCurrentStep] = useState<ImportStep>('upload')
  const [file, setFile] = useState<File | null>(null)
  const [previewResult, setPreviewResult] = useState<ImportPreviewResult | null>(null)
  const [executionResult, setExecutionResult] = useState<ImportExecutionResult | null>(null)
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState<string>('')
  const [showHistory, setShowHistory] = useState(false)
  const [importHistory, setImportHistory] = useState<ImportHistoryEntry[]>([])
  
  // Configuration options
  const [upsertOptions, setUpsertOptions] = useState<UpsertOptions>({
    updateExisting: true,
    createNew: true,
    requireConfirmation: false,
    selectedFields: []
  })

  const fileInputRef = useRef<HTMLInputElement>(null)

  const fieldOptions = [
    { id: 'name', label: 'Name', required: true },
    { id: 'email', label: 'Email' },
    { id: 'username', label: 'Username' },
    { id: 'role', label: 'Role', required: true },
    { id: 'department', label: 'Department' },
    { id: 'userType', label: 'User Type' },
    { id: 'employeeId', label: 'Employee ID' },
    { id: 'position', label: 'Position' },
    { id: 'shift', label: 'Shift' },
    { id: 'password', label: 'Password' }
  ]

  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {
    const selectedFile = event.target.files?.[0]
    if (selectedFile) {
      setFile(selectedFile)
      setError('')
      setPreviewResult(null)
      setExecutionResult(null)
    }
  }

  const handlePreview = async () => {
    if (!file) return
    
    setIsLoading(true)
    setError('')
    
    try {
      const formData = new FormData()
      formData.append('file', file)
      
      const result = await previewCSVImport(formData)
      setPreviewResult(result)
      
      if (result.success) {
        setCurrentStep('preview')
        // Initialize selected fields with all available fields
        setUpsertOptions(prev => ({
          ...prev,
          selectedFields: fieldOptions.map(f => f.id)
        }))
      } else {
        setError(result.globalErrors.join(', ') || 'Preview failed')
      }
    } catch {
      setError('Failed to preview CSV file')
    } finally {
      setIsLoading(false)
    }
  }

  const handleConfigure = () => {
    setCurrentStep('configure')
  }

  const handleExecute = async () => {
    if (!file || !previewResult) return
    
    setIsLoading(true)
    setError('')
    
    try {
      const formData = new FormData()
      formData.append('file', file)
      
      const result = await executeCSVImport(formData, upsertOptions)
      setExecutionResult(result)
      
      if (result.success) {
        setCurrentStep('complete')
        onImportComplete?.()
      } else {
        setError(result.message || 'Import execution failed')
      }
    } catch {
      setError('Failed to execute CSV import')
    } finally {
      setIsLoading(false)
    }
  }

  const handleReset = () => {
    setCurrentStep('upload')
    setFile(null)
    setPreviewResult(null)
    setExecutionResult(null)
    setError('')
    if (fileInputRef.current) {
      fileInputRef.current.value = ''
    }
  }

  const loadImportHistory = async () => {
    try {
      const result = await getImportHistory()
      if (result.success) {
        setImportHistory(result.history)
        setShowHistory(true)
      }
    } catch {
      setError('Failed to load import history')
    }
  }

  const handleRollback = async (auditLogId: string) => {
    if (!confirm('Are you sure you want to rollback this import? This action cannot be undone.')) {
      return
    }

    try {
      const result = await rollbackImport(auditLogId)
      if (result.success) {
        alert('Import rolled back successfully')
        loadImportHistory() // Refresh history
        onImportComplete?.() // Refresh user list
      } else {
        alert(result.error || 'Failed to rollback import')
      }
    } catch {
      alert('Failed to rollback import')
    }
  }

  const getStepNumber = (step: ImportStep) => {
    const steps = ['upload', 'preview', 'configure', 'execute', 'complete']
    return steps.indexOf(step) + 1
  }

  if (showHistory) {
    return (
      <Card className="max-w-4xl mx-auto">
        <CardHeader>
          <div className="flex items-center justify-between">
            <div>
              <CardTitle className="flex items-center gap-2">
                <History className="h-5 w-5" />
                Import History
              </CardTitle>
              <CardDescription>
                Recent CSV import operations and rollback options
              </CardDescription>
            </div>
            <Button
              variant="outline"
              onClick={() => setShowHistory(false)}
            >
              Back to Import
            </Button>
          </div>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {importHistory.map((entry) => (
              <Card key={entry.id}>
                <CardContent className="p-4">
                  <div className="flex items-center justify-between">
                    <div>
                      <div className="font-medium">{entry.operation === 'csv_import_execute' ? 'Import Executed' : 'Import Previewed'}</div>
                      <div className="text-sm text-muted-foreground">
                        {entry.userName} • {new Date(entry.timestamp).toLocaleDateString()}
                      </div>
                      <div className="text-sm mt-1">
                        {(entry.details as any)?.fileName} • {(entry.details as any)?.totalProcessed || (entry.details as any)?.totalRows} rows
                        {(entry.details as any)?.created && ` • ${(entry.details as any)?.created} created`}
                        {(entry.details as any)?.updated && ` • ${(entry.details as any)?.updated} updated`}
                        {(entry.details as any)?.failed && ` • ${(entry.details as any)?.failed} failed`}
                      </div>
                    </div>
                    {entry.operation === 'csv_import_execute' && (
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => handleRollback(entry.id)}
                        className="text-destructive"
                      >
                        <RotateCcw className="h-4 w-4 mr-1" />
                        Rollback
                      </Button>
                    )}
                  </div>
                </CardContent>
              </Card>
            ))}
            {importHistory.length === 0 && (
              <div className="text-center py-8 text-muted-foreground">
                No import history found
              </div>
            )}
          </div>
        </CardContent>
      </Card>
    )
  }

  return (
    <div className="max-w-4xl mx-auto space-y-6">
      {/* Progress Header */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center justify-between">
            <div className="flex items-center gap-2">
              <Users className="h-5 w-5" />
              Enterprise CSV Import
            </div>
            <div className="flex gap-2">
              <Button
                variant="outline"
                size="sm"
                onClick={loadImportHistory}
              >
                <History className="h-4 w-4 mr-1" />
                History
              </Button>
              <Button
                variant="outline"
                size="sm"
                onClick={() => window.open('/user-import-instructions.md', '_blank')}
              >
                <FileText className="h-4 w-4 mr-1" />
                Instructions
              </Button>
            </div>
          </CardTitle>
          <CardDescription>
            Upload, preview, and import users with upsert capabilities
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="flex items-center space-x-4">
            {['upload', 'preview', 'configure', 'execute', 'complete'].map((step, index) => (
              <div key={step} className="flex items-center">
                <div className={`
                  w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium
                  ${currentStep === step ? 'bg-primary text-primary-foreground' : 
                    getStepNumber(currentStep) > index + 1 ? 'bg-green-500 text-white' : 
                    'bg-muted text-muted-foreground'}
                `}>
                  {getStepNumber(currentStep) > index + 1 ? <CheckCircle className="h-4 w-4" /> : index + 1}
                </div>
                {index < 4 && (
                  <div className={`w-12 h-0.5 mx-2 ${
                    getStepNumber(currentStep) > index + 1 ? 'bg-green-500' : 'bg-muted'
                  }`} />
                )}
              </div>
            ))}
          </div>
        </CardContent>
      </Card>

      {/* Error Display */}
      {error && (
        <Alert variant="destructive">
          <AlertCircle className="h-4 w-4" />
          <AlertDescription>{error}</AlertDescription>
        </Alert>
      )}

      {/* Step Content */}
      {currentStep === 'upload' && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Upload className="h-5 w-5" />
              Step 1: Upload CSV File
            </CardTitle>
            <CardDescription>
              Select your CSV file to begin the import process
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <input
                ref={fileInputRef}
                type="file"
                accept=".csv"
                onChange={handleFileSelect}
                className="hidden"
                id="csv-file"
              />
              <label
                htmlFor="csv-file"
                className="flex flex-col items-center justify-center w-full h-32 border-2 border-dashed border-muted-foreground/25 rounded-lg cursor-pointer hover:bg-muted/50"
              >
                <Upload className="h-8 w-8 text-muted-foreground mb-2" />
                <span className="text-sm font-medium">Click to select CSV file</span>
                <span className="text-xs text-muted-foreground">Maximum 10MB</span>
              </label>
            </div>
            
            {file && (
              <div className="flex items-center justify-between p-3 bg-muted rounded-lg">
                <div>
                  <div className="font-medium">{file.name}</div>
                  <div className="text-sm text-muted-foreground">
                    {(file.size / 1024).toFixed(1)} KB
                  </div>
                </div>
                <Button
                  onClick={handlePreview}
                  disabled={isLoading}
                >
                  <Eye className="h-4 w-4 mr-1" />
                  {isLoading ? 'Analyzing...' : 'Preview'}
                </Button>
              </div>
            )}

            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <Card>
                <CardContent className="p-4">
                  <h4 className="font-medium mb-2">📊 Basic Template</h4>
                  <p className="text-sm text-muted-foreground mb-3">Simple structure with 14 users</p>
                  <Button size="sm" variant="outline" asChild>
                    <a href="/example-users.csv" download>
                      <Download className="h-4 w-4 mr-1" />
                      Download
                    </a>
                  </Button>
                </CardContent>
              </Card>
              
              <Card>
                <CardContent className="p-4">
                  <h4 className="font-medium mb-2">🔧 Advanced Template</h4>
                  <p className="text-sm text-muted-foreground mb-3">Complex hierarchy with 28 users</p>
                  <Button size="sm" variant="outline" asChild>
                    <a href="/example-users-advanced.csv" download>
                      <Download className="h-4 w-4 mr-1" />
                      Download
                    </a>
                  </Button>
                </CardContent>
              </Card>
              
              <Card>
                <CardContent className="p-4">
                  <h4 className="font-medium mb-2">📝 Empty Template</h4>
                  <p className="text-sm text-muted-foreground mb-3">Blank template for custom data</p>
                  <Button size="sm" variant="outline" asChild>
                    <a href="/user-import-template.csv" download>
                      <Download className="h-4 w-4 mr-1" />
                      Download
                    </a>
                  </Button>
                </CardContent>
              </Card>
            </div>
          </CardContent>
        </Card>
      )}

      {currentStep === 'preview' && previewResult && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Eye className="h-5 w-5" />
              Step 2: Preview Changes
            </CardTitle>
            <CardDescription>
              Review what will be imported and configure options
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-6">
            {/* Summary Stats */}
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
              <Card>
                <CardContent className="p-4 text-center">
                  <div className="text-2xl font-bold">{previewResult.totalRows}</div>
                  <div className="text-sm text-muted-foreground">Total Rows</div>
                </CardContent>
              </Card>
              <Card>
                <CardContent className="p-4 text-center">
                  <div className="text-2xl font-bold text-green-600">{previewResult.createCount}</div>
                  <div className="text-sm text-muted-foreground">New Users</div>
                </CardContent>
              </Card>
              <Card>
                <CardContent className="p-4 text-center">
                  <div className="text-2xl font-bold text-blue-600">{previewResult.updateCount}</div>
                  <div className="text-sm text-muted-foreground">Updates</div>
                </CardContent>
              </Card>
              <Card>
                <CardContent className="p-4 text-center">
                  <div className="text-2xl font-bold text-red-600">{previewResult.invalidRows}</div>
                  <div className="text-sm text-muted-foreground">Errors</div>
                </CardContent>
              </Card>
            </div>

            {/* Error Summary */}
            {previewResult.invalidRows > 0 && (
              <Alert variant="destructive">
                <AlertCircle className="h-4 w-4" />
                <AlertDescription>
                  {previewResult.invalidRows} rows have validation errors and will be skipped
                </AlertDescription>
              </Alert>
            )}

            {/* User Preview Table */}
            <div className="border rounded-lg">
              <div className="max-h-96 overflow-y-auto">
                <table className="w-full text-sm">
                  <thead className="bg-muted sticky top-0">
                    <tr>
                      <th className="text-left p-3">Name</th>
                      <th className="text-left p-3">Email/Username</th>
                      <th className="text-left p-3">Role</th>
                      <th className="text-left p-3">Action</th>
                      <th className="text-left p-3">Status</th>
                    </tr>
                  </thead>
                  <tbody>
                    {previewResult.users.map((user, index) => (
                      <tr key={index} className="border-t">
                        <td className="p-3 font-medium">{user.name}</td>
                        <td className="p-3">{user.email || user.username}</td>
                        <td className="p-3">{user.role}</td>
                        <td className="p-3">
                          <Badge variant={user.action === 'create' ? 'default' : 'secondary'}>
                            {user.action === 'create' ? (
                              <>
                                <UserPlus className="h-3 w-3 mr-1" />
                                Create
                              </>
                            ) : (
                              <>
                                <UserCheck className="h-3 w-3 mr-1" />
                                Update
                              </>
                            )}
                          </Badge>
                        </td>
                        <td className="p-3">
                          {user.validationErrors.length > 0 ? (
                            <Badge variant="destructive">
                              <AlertCircle className="h-3 w-3 mr-1" />
                              {user.validationErrors.length} errors
                            </Badge>
                          ) : (
                            <Badge variant="success">
                              <CheckCircle className="h-3 w-3 mr-1" />
                              Valid
                            </Badge>
                          )}
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </div>

            <div className="flex justify-between">
              <Button variant="outline" onClick={handleReset}>
                Start Over
              </Button>
              <Button onClick={handleConfigure}>
                <Settings className="h-4 w-4 mr-1" />
                Configure Import
              </Button>
            </div>
          </CardContent>
        </Card>
      )}

      {currentStep === 'configure' && previewResult && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Settings className="h-5 w-5" />
              Step 3: Configure Import Options
            </CardTitle>
            <CardDescription>
              Choose which operations to perform and which fields to update
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-6">
            {/* Import Operations */}
            <div>
              <h4 className="font-medium mb-3">Import Operations</h4>
              <div className="space-y-2">
                <div className="flex items-center space-x-2">
                  <Checkbox
                    id="create-new"
                    checked={upsertOptions.createNew}
                    onCheckedChange={(checked: boolean) => 
                      setUpsertOptions(prev => ({ ...prev, createNew: checked }))
                    }
                  />
                  <label htmlFor="create-new" className="text-sm">
                    Create new users ({previewResult.createCount} users)
                  </label>
                </div>
                <div className="flex items-center space-x-2">
                  <Checkbox
                    id="update-existing"
                    checked={upsertOptions.updateExisting}
                    onCheckedChange={(checked: boolean) => 
                      setUpsertOptions(prev => ({ ...prev, updateExisting: checked }))
                    }
                  />
                  <label htmlFor="update-existing" className="text-sm">
                    Update existing users ({previewResult.updateCount} users)
                  </label>
                </div>
              </div>
            </div>

            <Separator />

            {/* Field Selection for Updates */}
            {upsertOptions.updateExisting && previewResult.updateCount > 0 && (
              <div>
                <h4 className="font-medium mb-3">Fields to Update</h4>
                <div className="grid grid-cols-2 md:grid-cols-3 gap-2">
                  {fieldOptions.map((field) => (
                    <div key={field.id} className="flex items-center space-x-2">
                      <Checkbox
                        id={`field-${field.id}`}
                        checked={upsertOptions.selectedFields?.includes(field.id) || field.required}
                        disabled={field.required}
                        onCheckedChange={(checked: boolean) => {
                          if (field.required) return
                          setUpsertOptions(prev => ({
                            ...prev,
                            selectedFields: checked
                              ? [...(prev.selectedFields || []), field.id]
                              : (prev.selectedFields || []).filter(f => f !== field.id)
                          }))
                        }}
                      />
                      <label htmlFor={`field-${field.id}`} className="text-sm">
                        {field.label} {field.required && <span className="text-red-500">*</span>}
                      </label>
                    </div>
                  ))}
                </div>
              </div>
            )}

            <Separator />

            {/* Safety Options */}
            <div>
              <h4 className="font-medium mb-3">Safety Options</h4>
              <div className="flex items-center space-x-2">
                <Checkbox
                  id="require-confirmation"
                  checked={upsertOptions.requireConfirmation}
                  onCheckedChange={(checked: boolean) => 
                    setUpsertOptions(prev => ({ ...prev, requireConfirmation: checked }))
                  }
                />
                <label htmlFor="require-confirmation" className="text-sm">
                  Require final confirmation before executing
                </label>
              </div>
            </div>

            <div className="flex justify-between">
              <Button variant="outline" onClick={() => setCurrentStep('preview')}>
                Back to Preview
              </Button>
              <Button onClick={() => setCurrentStep('execute')}>
                <Play className="h-4 w-4 mr-1" />
                Execute Import
              </Button>
            </div>
          </CardContent>
        </Card>
      )}

      {currentStep === 'execute' && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Play className="h-5 w-5" />
              Step 4: Execute Import
            </CardTitle>
            <CardDescription>
              Final confirmation and import execution
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-6">
            {!executionResult && (
              <>
                <Alert>
                  <AlertCircle className="h-4 w-4" />
                  <AlertDescription>
                    This will modify your database. Make sure you have a backup if needed.
                  </AlertDescription>
                </Alert>

                <div className="space-y-4">
                  <div>
                    <h4 className="font-medium mb-2">Import Summary</h4>
                    <div className="text-sm space-y-1">
                      {upsertOptions.createNew && <div>✅ Create {previewResult?.createCount || 0} new users</div>}
                      {upsertOptions.updateExisting && <div>✅ Update {previewResult?.updateCount || 0} existing users</div>}
                      <div>⚠️ Skip {previewResult?.invalidRows || 0} invalid rows</div>
                    </div>
                  </div>

                  {upsertOptions.updateExisting && (
                    <div>
                      <h4 className="font-medium mb-2">Fields to Update</h4>
                      <div className="text-sm">
                        {upsertOptions.selectedFields?.join(', ') || 'All fields'}
                      </div>
                    </div>
                  )}
                </div>

                <div className="flex justify-between">
                  <Button variant="outline" onClick={() => setCurrentStep('configure')}>
                    Back to Configuration
                  </Button>
                  <Button
                    onClick={handleExecute}
                    disabled={isLoading}
                    className="bg-red-600 hover:bg-red-700"
                  >
                    {isLoading ? 'Executing...' : 'Confirm & Execute'}
                  </Button>
                </div>
              </>
            )}

            {executionResult && (
              <div className="space-y-4">
                {executionResult.success ? (
                  <Alert>
                    <CheckCircle className="h-4 w-4" />
                    <AlertDescription>
                      {executionResult.message}
                    </AlertDescription>
                  </Alert>
                ) : (
                  <Alert variant="destructive">
                    <AlertCircle className="h-4 w-4" />
                    <AlertDescription>
                      {executionResult.message}
                    </AlertDescription>
                  </Alert>
                )}

                <div className="grid grid-cols-3 gap-4">
                  <Card>
                    <CardContent className="p-4 text-center">
                      <div className="text-2xl font-bold text-green-600">{executionResult.created}</div>
                      <div className="text-sm text-muted-foreground">Created</div>
                    </CardContent>
                  </Card>
                  <Card>
                    <CardContent className="p-4 text-center">
                      <div className="text-2xl font-bold text-blue-600">{executionResult.updated}</div>
                      <div className="text-sm text-muted-foreground">Updated</div>
                    </CardContent>
                  </Card>
                  <Card>
                    <CardContent className="p-4 text-center">
                      <div className="text-2xl font-bold text-red-600">{executionResult.failed}</div>
                      <div className="text-sm text-muted-foreground">Failed</div>
                    </CardContent>
                  </Card>
                </div>

                {executionResult.errors.length > 0 && (
                  <div>
                    <h4 className="font-medium mb-2">Errors</h4>
                    <div className="text-sm space-y-1 max-h-32 overflow-y-auto">
                      {executionResult.errors.map((error, index) => (
                        <div key={index} className="text-red-600">{error}</div>
                      ))}
                    </div>
                  </div>
                )}

                <Button onClick={handleReset} className="w-full">
                  Import Another File
                </Button>
              </div>
            )}
          </CardContent>
        </Card>
      )}
    </div>
  )
}